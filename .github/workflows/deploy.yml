name: Build and Deploy ICP Canister

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  VERSION: ${{ github.sha }}
  PACKAGE: "frontend"
  DFX_VERSION: "0.26.1"
  DFX_WARNING: "-mainnet_plaintext_identity"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          version: ${{ env.DFX_VERSION }}
          install-dfxvm: true
          install-dfx: true

      - name: Setup dfx environment
        run: |
          source "$HOME/.local/share/dfx/env"
          dfxvm install ${{ env.DFX_VERSION }}
          dfxvm default ${{ env.DFX_VERSION }}
          dfx --version

      - name: Install dependencies
        run: |
          cd src/frontend
          npm install
          npm install --save-dev typescript @types/node vite @vitejs/plugin-react @types/react @types/react-dom

      - name: Prepare Frontend Build
        run: |
          source "$HOME/.local/share/dfx/env"
          mkdir -p .dfx/local/canisters/frontend
          cp src/frontend/assetstorage.did .dfx/local/canisters/frontend/

      - name: Configure Build
        run: |
          cd src/frontend
          # Create vite-env.d.ts
          echo '/// <reference types="vite/client" />' > src/vite-env.d.ts
          # Update package.json build script
          npm pkg set scripts.build="vite build"
          # Create tsconfig.json
          echo '{
            "compilerOptions": {
              "target": "ES2020",
              "useDefineForClassFields": true,
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "module": "ESNext",
              "skipLibCheck": true,
              "moduleResolution": "bundler",
              "allowImportingTsExtensions": true,
              "resolveJsonModule": true,
              "isolatedModules": true,
              "noEmit": true,
              "jsx": "react-jsx",
              "strict": true,
              "noUnusedLocals": false,
              "noUnusedParameters": false,
              "noFallthroughCasesInSwitch": true
            },
            "include": ["src"],
            "references": [{ "path": "./tsconfig.node.json" }]
          }' > tsconfig.json
          # Create tsconfig.node.json
          echo '{
            "compilerOptions": {
              "composite": true,
              "skipLibCheck": true,
              "module": "ESNext",
              "moduleResolution": "bundler",
              "allowSyntheticDefaultImports": true
            },
            "include": ["vite.config.ts"]
          }' > tsconfig.node.json

      - name: Build Frontend
        run: |
          source "$HOME/.local/share/dfx/env"
          # Create necessary directories
          mkdir -p $GITHUB_WORKSPACE/wasm
          cd $GITHUB_WORKSPACE/src/frontend
          # Build the frontend assets
          npm run build
          # Create the frontend canister
          cd $GITHUB_WORKSPACE
          dfx canister create frontend --network ic || true
          # Build the frontend canister
          dfx build frontend --network ic
          # Copy the wasm file to the wasm directory
          cp .dfx/ic/canisters/frontend/frontend.wasm.gz $GITHUB_WORKSPACE/wasm/frontend.wasm.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend_dist
          path: src/frontend/dist
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend_dist
          path: src/frontend/dist

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          version: ${{ env.DFX_VERSION }}
          install-dfxvm: true
          install-dfx: true

      - name: Setup dfx environment
        run: |
          source "$HOME/.local/share/dfx/env"
          dfxvm install ${{ env.DFX_VERSION }}
          dfxvm default ${{ env.DFX_VERSION }}

      - name: Authenticate dfx
        shell: bash
        run: |
          if [ -z "${{ secrets.IC_IDENTITY }}" ]; then
            echo "Error: IC_IDENTITY secret is not set"
            exit 1
          fi
          echo "${{ secrets.IC_IDENTITY }}" | base64 --decode > deploy_identity.pem
          if [ ! -s deploy_identity.pem ]; then
            echo "Error: Failed to decode IC_IDENTITY"
            exit 1
          fi
          dfx identity import --storage-mode=plaintext deploy_identity deploy_identity.pem
          dfx identity use deploy_identity

      - name: Deploy frontend assets canister
        shell: bash
        env:
          DFX_WARNING: -mainnet_plaintext_identity
        run: |
          dfx deploy frontend --network ic